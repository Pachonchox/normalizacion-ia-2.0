"""
üîç Debug Ripley P√°gina 2 - NAVEGADOR ABIERTO
An√°lisis espec√≠fico de por qu√© la p√°gina 2 no carga productos
"""

import sys
import io
import json
import time
import re
import zipfile
import tempfile
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
from bs4 import BeautifulSoup
import logging

# Configurar encoding para Windows
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')

# Configurar logging simple
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')

def setup_debug_driver():
    """üöÄ Driver con navegador VISIBLE para debug con configuraci√≥n de seguridad mejorada"""
    chrome_options = Options()
    
    # NO HEADLESS - queremos ver el navegador
    # chrome_options.add_argument("--headless")  # COMENTADO para debug
    
    # Configuraciones b√°sicas
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--disable-web-security")
    
    # Configuraciones para evitar advertencias de seguridad
    chrome_options.add_argument("--ignore-certificate-errors-spki-list")
    chrome_options.add_argument("--ignore-certificate-errors")
    chrome_options.add_argument("--ignore-ssl-errors")
    chrome_options.add_argument("--allow-running-insecure-content")
    chrome_options.add_argument("--disable-extensions-https-warnings")
    chrome_options.add_argument("--disable-features=VizDisplayCompositor")
    chrome_options.add_argument("--ignore-certificate-verification")
    
    # Anti-detecci√≥n mejorada
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")
    chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
    chrome_options.add_experimental_option('useAutomationExtension', False)
    
    # Configuraciones de navegador normal
    chrome_options.add_argument("--start-maximized")
    chrome_options.add_argument("--disable-infobars")
    chrome_options.add_argument("--disable-notifications")
    
    # User agent actualizado
    chrome_options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36")
    
    # Configuraciones experimentales para estabilidad
    chrome_options.add_experimental_option("prefs", {
        "profile.default_content_setting_values.notifications": 2,
        "profile.default_content_settings.popups": 0,
        "profile.managed_default_content_settings.images": 1
    })
    
    print("üîß DEBUG CON CONFIGURACI√ìN DE SEGURIDAD MEJORADA")
    print("‚ö†Ô∏è SIN PROXY - Solo para an√°lisis de estructura de p√°gina")
    
    try:
        driver = webdriver.Chrome(options=chrome_options)
        driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
        driver.set_page_load_timeout(60)  # Aumentado timeout
        driver.implicitly_wait(15)  # Aumentado wait
        
        print("‚úÖ Navegador Chrome iniciado correctamente")
        return driver
    except Exception as e:
        print(f"‚ùå Error iniciando Chrome: {e}")
        raise

def debug_pagina2():
    """üîç Debug espec√≠fico de la p√°gina 2"""
    print("üîç RIPLEY DEBUG - P√ÅGINA 2 CON NAVEGADOR ABIERTO")
    print("üì∫ Analizando: smartphone p√°gina 2")
    print("="*60)
    
    driver = setup_debug_driver()
    
    try:
        # PASO 1: Cargar p√°gina 1 primero
        print("\nüìÑ PASO 1: Cargando p√°gina 1...")
        url_pagina1 = "https://simple.ripley.cl/tecno/celulares?source=search&term=smartphone&s=mdco&type=catalog"
        print(f"üîó URL: {url_pagina1}")
        
        try:
            driver.get(url_pagina1)
            print("‚úÖ P√°gina 1 cargada exitosamente")
            time.sleep(5)
        except Exception as e:
            print(f"‚ö†Ô∏è Error cargando p√°gina 1: {e}")
            print("üîÑ Continuando con el debug...")
        
        # Scroll en p√°gina 1
        print("üìú Haciendo scroll en p√°gina 1...")
        try:
            driver.execute_script("window.scrollTo(0, document.body.scrollHeight/2);")
            time.sleep(2)
            driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
            time.sleep(3)
            print("‚úÖ Scroll en p√°gina 1 completado")
        except Exception as e:
            print(f"‚ö†Ô∏è Error durante scroll: {e}")
            print("üîÑ Continuando con el an√°lisis...")
        
        # Buscar productos en p√°gina 1
        soup1 = BeautifulSoup(driver.page_source, 'lxml')
        products1 = soup1.find_all('a', href=True)
        product_links1 = [a for a in products1 if '/p/' in a.get('href', '')]
        print(f"‚úÖ Productos encontrados en p√°gina 1: {len(product_links1)}")
        
        print("‚è∏Ô∏è NAVEGADOR ABIERTO - Revisa la p√°gina 1 en pantalla...")
        print("‚è∏Ô∏è Continuando a p√°gina 2 en 10 segundos...")
        time.sleep(10)
        
        # PASO 2: Cargar p√°gina 2 directamente
        print("\nüìÑ PASO 2: Cargando p√°gina 2 DIRECTAMENTE...")
        url_pagina2 = "https://simple.ripley.cl/tecno/celulares?source=search&term=smartphone&page=2&s=mdco&type=catalog"
        print(f"üîó URL: {url_pagina2}")
        
        driver.get(url_pagina2)
        time.sleep(5)
        
        # Scroll en p√°gina 2
        print("üìú Haciendo scroll en p√°gina 2...")
        driver.execute_script("window.scrollTo(0, document.body.scrollHeight/2);")
        time.sleep(2)
        driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
        time.sleep(3)
        
        # Buscar productos en p√°gina 2
        soup2 = BeautifulSoup(driver.page_source, 'lxml')
        products2 = soup2.find_all('a', href=True)
        product_links2 = [a for a in products2 if '/p/' in a.get('href', '')]
        print(f"‚ö†Ô∏è Productos encontrados en p√°gina 2: {len(product_links2)}")
        
        # Analizar el HTML de la p√°gina 2
        print("\nüîç ANALIZANDO HTML DE P√ÅGINA 2...")
        title = driver.title
        print(f"üìã T√≠tulo de p√°gina: {title}")
        
        # Buscar mensajes de error
        error_messages = soup2.find_all(['div', 'span', 'p'], string=re.compile(r'no.*encontr|error|bloqueado|forbidden', re.IGNORECASE))
        if error_messages:
            print("‚ö†Ô∏è Mensajes de error encontrados:")
            for msg in error_messages:
                print(f"   - {msg.get_text(strip=True)}")
        
        # Buscar indicadores de paginaci√≥n
        pagination = soup2.find_all(['div', 'ul', 'nav'], class_=re.compile(r'pagin|page', re.IGNORECASE))
        if pagination:
            print(f"üî¢ Elementos de paginaci√≥n encontrados: {len(pagination)}")
        
        # Guardar HTML para an√°lisis
        with open('ripley_debug_pagina2.html', 'w', encoding='utf-8') as f:
            f.write(driver.page_source)
        print("üíæ HTML guardado: ripley_debug_pagina2.html")
        
        print("‚è∏Ô∏è NAVEGADOR ABIERTO - Revisa la p√°gina 2 en pantalla...")
        print("‚è∏Ô∏è Continuando a navegaci√≥n por clicks en 10 segundos...")
        time.sleep(10)
        
        # PASO 3: Intentar navegar desde p√°gina 1 usando clicks
        print("\nüìÑ PASO 3: Navegando desde p√°gina 1 con CLICKS...")
        driver.get(url_pagina1)
        time.sleep(5)
        
        # Buscar bot√≥n "Siguiente" o "2"
        try:
            # Intentar encontrar bot√≥n de p√°gina 2
            next_buttons = driver.find_elements(By.XPATH, "//a[contains(text(),'2')] | //button[contains(text(),'2')] | //a[contains(text(),'Siguiente')] | //button[contains(text(),'Siguiente')]")
            
            if next_buttons:
                print(f"üîò Botones de navegaci√≥n encontrados: {len(next_buttons)}")
                for i, btn in enumerate(next_buttons[:3]):  # Solo los primeros 3
                    try:
                        print(f"   Bot√≥n {i+1}: {btn.text} - {btn.tag_name}")
                        if '2' in btn.text or 'Siguiente' in btn.text:
                            print(f"üñ±Ô∏è Haciendo click en: {btn.text}")
                            driver.execute_script("arguments[0].scrollIntoView();", btn)
                            time.sleep(1)
                            driver.execute_script("arguments[0].click();", btn)
                            time.sleep(5)
                            
                            # Ver si funcion√≥
                            current_url = driver.current_url
                            print(f"üîó URL despu√©s del click: {current_url}")
                            
                            soup3 = BeautifulSoup(driver.page_source, 'lxml')
                            products3 = soup3.find_all('a', href=True)
                            product_links3 = [a for a in products3 if '/p/' in a.get('href', '')]
                            print(f"üì¶ Productos tras click: {len(product_links3)}")
                            break
                    except Exception as e:
                        print(f"‚ùå Error con bot√≥n {i+1}: {e}")
            else:
                print("‚ùå No se encontraron botones de navegaci√≥n")
                
        except Exception as e:
            print(f"‚ùå Error buscando navegaci√≥n: {e}")
        
        print("‚è∏Ô∏è NAVEGADOR ABIERTO - Debug completado, revisa los resultados...")
        print("‚è∏Ô∏è Cerrando navegador en 15 segundos...")
        time.sleep(15)
        
    except Exception as e:
        print(f"‚ùå Error durante debug: {e}")
        print("‚è∏Ô∏è Error ocurrido. Cerrando autom√°ticamente...")
        time.sleep(2)
    finally:
        driver.quit()

if __name__ == "__main__":
    debug_pagina2()