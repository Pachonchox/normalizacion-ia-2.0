"""
üîç Ripley Navegaci√≥n Avanzada - BOT√ìN DE PAGINACI√ìN
Navegaci√≥n correcta usando botones de p√°gina en lugar de URLs directas
"""

import sys
import io
import json
import time
import re
import tempfile
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from bs4 import BeautifulSoup
import logging

# Configurar encoding para Windows
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')

# Configurar logging simple
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')

def setup_navigation_driver():
    """üöÄ Driver optimizado para navegaci√≥n por botones de paginaci√≥n"""
    chrome_options = Options()
    
    # Configuraciones b√°sicas
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--disable-web-security")
    
    # Configuraciones para evitar advertencias de seguridad
    chrome_options.add_argument("--ignore-certificate-errors-spki-list")
    chrome_options.add_argument("--ignore-certificate-errors")
    chrome_options.add_argument("--ignore-ssl-errors")
    chrome_options.add_argument("--allow-running-insecure-content")
    chrome_options.add_argument("--disable-extensions-https-warnings")
    
    # Anti-detecci√≥n mejorada
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")
    chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
    chrome_options.add_experimental_option('useAutomationExtension', False)
    
    # Configuraciones de navegador normal
    chrome_options.add_argument("--start-maximized")
    chrome_options.add_argument("--disable-infobars")
    chrome_options.add_argument("--disable-notifications")
    
    # User agent actualizado
    chrome_options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36")
    
    # Configuraciones experimentales
    chrome_options.add_experimental_option("prefs", {
        "profile.default_content_setting_values.notifications": 2,
        "profile.default_content_settings.popups": 0,
        "profile.managed_default_content_settings.images": 1
    })
    
    print("üîß NAVEGADOR CONFIGURADO PARA NAVEGACI√ìN POR BOTONES")
    
    try:
        driver = webdriver.Chrome(options=chrome_options)
        driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
        driver.set_page_load_timeout(60)
        driver.implicitly_wait(10)
        
        print("‚úÖ Navegador Chrome iniciado correctamente")
        return driver
    except Exception as e:
        print(f"‚ùå Error iniciando Chrome: {e}")
        raise

def buscar_boton_siguiente(driver):
    """üîç Busca el bot√≥n de p√°gina siguiente en diferentes ubicaciones"""
    
    # Lista de selectores posibles para el bot√≥n siguiente
    selectores = [
        # Selectores por texto
        "//button[contains(text(), 'Siguiente')]",
        "//a[contains(text(), 'Siguiente')]",
        "//button[contains(text(), '‚Ä∫')]",
        "//a[contains(text(), '‚Ä∫')]",
        "//button[contains(text(), '2')]",
        "//a[contains(text(), '2')]",
        
        # Selectores por clase CSS comunes para paginaci√≥n
        "//div[contains(@class, 'pagination')]//button[2]",
        "//div[contains(@class, 'pagination')]//a[2]",
        "//ul[contains(@class, 'pagination')]//li[2]//a",
        "//ul[contains(@class, 'pagination')]//li[2]//button",
        
        # Selectores por atributos data
        "//button[@data-page='2']",
        "//a[@data-page='2']",
        "//button[@aria-label='Go to page 2']",
        "//a[@aria-label='Go to page 2']",
        
        # Selectores gen√©ricos de navegaci√≥n
        "//nav//button[contains(text(), '2')]",
        "//nav//a[contains(text(), '2')]",
        ".pagination-next",
        ".page-next",
        "[data-testid='pagination-next']",
    ]
    
    print("üîç Buscando bot√≥n de p√°gina siguiente...")
    
    for i, selector in enumerate(selectores):
        try:
            if selector.startswith('//'):
                # XPath selector
                elementos = driver.find_elements(By.XPATH, selector)
            else:
                # CSS selector
                elementos = driver.find_elements(By.CSS_SELECTOR, selector)
            
            if elementos:
                print(f"‚úÖ Encontrado bot√≥n con selector {i+1}: {selector}")
                print(f"üìä Elementos encontrados: {len(elementos)}")
                
                for j, elemento in enumerate(elementos):
                    try:
                        texto = elemento.text.strip()
                        es_clickeable = elemento.is_enabled() and elemento.is_displayed()
                        print(f"   Elemento {j+1}: '{texto}' - Clickeable: {es_clickeable}")
                        
                        if es_clickeable and (texto == '2' or 'siguiente' in texto.lower() or '‚Ä∫' in texto):
                            return elemento
                    except Exception as e:
                        print(f"   ‚ö†Ô∏è Error verificando elemento {j+1}: {e}")
                        continue
        except Exception as e:
            print(f"‚ö†Ô∏è Error con selector {i+1}: {e}")
            continue
    
    print("‚ùå No se encontr√≥ bot√≥n de p√°gina siguiente")
    return None

def navegacion_avanzada():
    """üöÄ Navegaci√≥n avanzada usando botones de paginaci√≥n"""
    print("üîç RIPLEY NAVEGACI√ìN AVANZADA - BOTONES DE PAGINACI√ìN")
    print("üì∫ Navegando de p√°gina 1 a p√°gina 2 usando botones")
    print("="*60)
    
    driver = setup_navigation_driver()
    
    try:
        # PASO 1: Cargar p√°gina 1
        print("\nüìÑ PASO 1: Cargando p√°gina 1...")
        url_pagina1 = "https://simple.ripley.cl/tecno/celulares?source=search&term=smartphone&s=mdco&type=catalog"
        print(f"üîó URL: {url_pagina1}")
        
        try:
            driver.get(url_pagina1)
            print("‚úÖ P√°gina 1 cargada exitosamente")
            time.sleep(5)
        except Exception as e:
            print(f"‚ö†Ô∏è Error cargando p√°gina 1: {e}")
            return
        
        # Scroll para cargar contenido din√°mico
        print("üìú Haciendo scroll para cargar contenido...")
        try:
            driver.execute_script("window.scrollTo(0, document.body.scrollHeight/2);")
            time.sleep(2)
            driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
            time.sleep(3)
            print("‚úÖ Scroll completado")
        except Exception as e:
            print(f"‚ö†Ô∏è Error durante scroll: {e}")
        
        # Contar productos en p√°gina 1
        soup1 = BeautifulSoup(driver.page_source, 'lxml')
        products1 = soup1.find_all('a', href=True)
        product_links1 = [a for a in products1 if '/p/' in a.get('href', '')]
        print(f"üì¶ Productos encontrados en p√°gina 1: {len(product_links1)}")
        
        print("\n‚è∞ PAUSA - Observa la p√°gina 1 por 12 segundos...")
        print("üì± Deber√≠as ver productos de smartphones cargados en pantalla")
        time.sleep(12)
        
        # PASO 2: Buscar y hacer clic en bot√≥n siguiente
        print("\nüîò PASO 2: Buscando bot√≥n de p√°gina siguiente...")
        
        # Scroll hacia abajo para encontrar la paginaci√≥n
        driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
        time.sleep(2)
        
        boton_siguiente = buscar_boton_siguiente(driver)
        
        if boton_siguiente:
            try:
                print(f"üñ±Ô∏è Haciendo clic en bot√≥n: '{boton_siguiente.text}'")
                
                # Scroll al bot√≥n
                driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", boton_siguiente)
                time.sleep(1)
                
                # Hacer clic
                driver.execute_script("arguments[0].click();", boton_siguiente)
                print("‚úÖ Clic ejecutado exitosamente")
                print("‚è≥ Esperando carga de p√°gina 2...")
                time.sleep(8)
                
                # Verificar si la navegaci√≥n funcion√≥
                current_url = driver.current_url
                print(f"üîó URL actual despu√©s del clic: {current_url}")
                
                # Contar productos en p√°gina 2
                soup2 = BeautifulSoup(driver.page_source, 'lxml')
                products2 = soup2.find_all('a', href=True)
                product_links2 = [a for a in products2 if '/p/' in a.get('href', '')]
                print(f"üì¶ Productos encontrados en p√°gina 2: {len(product_links2)}")
                
                # Verificar t√≠tulo para detectar bloqueo
                title = driver.title
                print(f"üìã T√≠tulo de p√°gina 2: {title}")
                
                if "blocked" in title.lower() or "error" in title.lower():
                    print("‚ö†Ô∏è P√°gina 2 est√° bloqueada")
                else:
                    print("‚úÖ Navegaci√≥n exitosa a p√°gina 2")
                
            except Exception as e:
                print(f"‚ùå Error haciendo clic: {e}")
        else:
            print("‚ùå No se pudo encontrar el bot√≥n de siguiente")
        
        print("\n‚è∞ PAUSA FINAL - Observa los resultados por 20 segundos...")
        print("üìä Puedes revisar si la p√°gina 2 se carg√≥ o est√° bloqueada")
        time.sleep(20)
        
    except Exception as e:
        print(f"‚ùå Error durante navegaci√≥n: {e}")
    finally:
        print("üîö Cerrando navegador...")
        driver.quit()
        print("‚úÖ Debug completado")

if __name__ == "__main__":
    navegacion_avanzada()